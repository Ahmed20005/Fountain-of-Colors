function Initialize()

  local cfg = SKIN:GetVariable("Config")
  local includeVariables, max = 0, math.max
  local colors, angle = SKIN:GetVariable("Colors"), SKIN:GetVariable("Angle")
  local bands, fftSize, fftBufferSize = SKIN:GetVariable("Bands"), SKIN:GetVariable("FFTSize"), SKIN:GetVariable("FFTBufferSize")
  
  local rootCfgPath = SKIN:GetVariable("ROOTCONFIGPATH")
  local sharedPath = rootCfgPath..SKIN:GetVariable("SkinGroup")
  local rotationPath = rootCfgPath.."SkinRotation"
  
  local wKV, setO = "!WriteKeyValue", "!SetOption"
  local incl = "Include"
  
  -- Measure/meter options should be absolute (not referenced or calculated by the skin parser)
  SKIN:Bang(wKV,"Audio","Port",         SKIN:GetVariable("Port"),sharedPath)
  SKIN:Bang(wKV,"Audio","ID",           SKIN:GetVariable("ID"),sharedPath)
  SKIN:Bang(wKV,"Audio","Channel",      SKIN:GetVariable("Channel"),sharedPath)
  SKIN:Bang(wKV,"Audio","FFTSize",      fftSize+(fftSize%2),sharedPath)
  SKIN:Bang(wKV,"Audio","FFTBufferSize",fftBufferSize+(fftBufferSize%2),sharedPath)
  SKIN:Bang(wKV,"Audio","FFTAttack",    SKIN:GetVariable("FFTAttack"),sharedPath)
  SKIN:Bang(wKV,"Audio","FFTDecay",     SKIN:GetVariable("FFTDecay"),sharedPath)
  SKIN:Bang(wKV,"Audio","Bands",        max(2,bands),sharedPath)
  SKIN:Bang(wKV,"Audio","FreqMin",      SKIN:GetVariable("FreqMin"),sharedPath)
  SKIN:Bang(wKV,"Audio","FreqMax",      SKIN:GetVariable("FreqMax"),sharedPath)
  SKIN:Bang(wKV,"Audio","Sensitivity",  SKIN:GetVariable("Sensitivity"),sharedPath)

  -- Conditional inclusion of measures/meters
  if angle ~= "" and angle ~= "0" then
    includeVariables = 1
    SKIN:Bang(wKV,incl,"@Include2","SkinRotation",sharedPath)
  else
    SKIN:Bang(wKV,incl,"@Include2","",sharedPath)
  end
  
  if colors ~= "Individual" then
    SKIN:Bang(wKV,incl,"@Include3","",sharedPath)
  else
    SKIN:Bang(wKV,incl,"@Include3","IndividualBarColors.inc",sharedPath)
  end
  
  if colors ~= "Single" and true or
    (SKIN:GetVariable("DecayEffect") ~= "0" and true or
    (SKIN:GetVariable("OpacityMin") ~= SKIN:GetVariable("OpacityMax") and true or
    false)) then

    includeVariables = 1
    SKIN:Bang(wKV,incl,"@Include4","ColorChangerInc",sharedPath)
    SKIN:Bang(wKV,"Audio","OnUpdateAction","[!UpdateMeasureGroup Audio][!UpdateMeterGroup Bars][!UpdateMeasure ScriptColorChanger][!Redraw]",sharedPath)

    if colors == "Wallpaper" and true or (colors == "Window" and true or false) then
      SKIN:Bang(wKV,"EnableColorTransition","@Include","#*ROOTCONFIGPATH*#GetColor"..colors,"#ROOTCONFIGPATH#ColorChangerInc")
      SKIN:Bang(wKV,"Rainmeter","Update",4000,sharedPath)
     else
      SKIN:Bang(wKV,"EnableColorTransition","@Include","","#ROOTCONFIGPATH#ColorChangerInc")
      SKIN:Bang(wKV,"Rainmeter","Update",-1,sharedPath)
    end
    
    -- Also let ColorChanger know which skins are active
    SKIN:Bang(wKV,"Variables","SetCloneColorState",'[!CommandMeasure ScriptColorChanger """AddChild("[CurrentConfig]","#Invert#" ~= 1 and 0 or 1)""" "#ROOTCONFIG#"]',"#@#Variables.inc")
	
    if SKIN:GetVariable("Config") == SKIN:GetVariable("ROOTCONFIG") then
      mainColorState = '[!CommandMeasure ScriptColorChanger SetParent() "#ROOTCONFIG#"]'
    else mainColorState = "" end
  else
    mainColorState = ""
    SKIN:Bang(wKV,incl,"@Include4","",sharedPath)
    SKIN:Bang(wKV,"Variables","SetCloneColorState","","#@#Variables.inc")
    SKIN:Bang(wKV,"Audio","OnUpdateAction","[!UpdateMeasureGroup Audio][!UpdateMeterGroup Bars][!Redraw]",sharedPath)
    SKIN:Bang(wKV,"Rainmeter","Update",-1,sharedPath)
  end
  
  nearestAxis, matrix = 0, ""
  SKIN:Bang(wKV,"NearestAxis","OnUpdateAction",'[!CommandMeasure ScriptInitialize "nearestAxis = [NearestAxis]" "#ROOTCONFIG#\\Initialize"]',rotationPath)
  SKIN:Bang(wKV,"Matrix","OnUpdateAction",'[!CommandMeasure ScriptInitialize """matrix = "[Matrix]"""" "#ROOTCONFIG#\\Initialize"]',rotationPath)
  
  if includeVariables ~= 0 then
    SKIN:Bang(wKV,"\\","@Include3","#*@*#Variables.inc","#ROOTCONFIGPATH#Fountain of Colors.ini")
  else
    SKIN:Bang(wKV,"\\","@Include3","","#ROOTCONFIGPATH#Fountain of Colors.ini")
  end
  
  SKIN:Bang(wKV,"Rainmeter","ContextAction",'[!ActivateConfig "#ROOTCONFIG#\\Options"]',sharedPath)
  SKIN:Bang(wKV,"Rainmeter","OnRefreshAction","",sharedPath)
  
  SKIN:Bang("!DeactivateConfig",cfg)
  SKIN:Bang("!ActivateConfig",cfg)
  

  SKIN:Bang(mainColorState)

  -- Set options on measures/meters for the current skin

  local barHeight = SKIN:GetVariable("BarHeight")
  local barWidth, barGap = SKIN:GetVariable("BarWidth"), SKIN:GetVariable("BarGap")
  local offset = barWidth + barGap
  local invert  = SKIN:GetVariable("Invert")

  local lowerLimit, upperLimit = SKIN:GetVariable("FirstBandIndex") + 1, max(2, bands-1) + 1

  for i = lowerLimit, upperLimit do
  
    if nearestAxis ~= 0 then
      SKIN:Bang(setO,i-1,"W",barHeight,cfg)
      SKIN:Bang(setO,i-1,"H",barWidth,cfg)
      SKIN:Bang(setO,i-1,"Y",offset * (i - lowerLimit),cfg)
    else
      SKIN:Bang(setO,i-1,"W",barWidth,cfg)
      SKIN:Bang(setO,i-1,"H",barHeight,cfg)
      SKIN:Bang(setO,i-1,"X",offset * (i - lowerLimit),cfg)
    end
  
    if angle ~= "" and angle ~= "0" then
      if nearestAxis ~= 0 then
        SKIN:Bang(setO,i-1,"BarOrientation","Horizontal",cfg)
      end
      SKIN:Bang(setO,i-1,"AntiAlias",1,cfg)
      SKIN:Bang(setO,i-1,"TransformationMatrix",matrix,cfg)
      SKIN:Bang("!UpdateMeter",i-1,cfg)
      SKIN:Bang(setO,i-1,"TransformationMatrix","",cfg)
    end
  
    if colors == "Single" then
      SKIN:Bang(setO,i-1,"BarColor",SKIN:GetVariable("PaletteColor1"),cfg)
    end
    SKIN:Bang(setO,i-1,"Group","Bars",cfg)
    SKIN:Bang("!UpdateMeter",i-1,cfg)


    local measureName = "Audio"..i-1

    if invert ~= "" and invert ~= "0" then
      SKIN:Bang(setO,measureName,"BandIdx",lowerLimit + upperLimit - i-1,cfg)
    end
    SKIN:Bang(setO,measureName,"AverageSize",SKIN:GetVariable("AverageSize"),cfg)
    SKIN:Bang(setO,measureName,"Group","Audio",cfg)
    SKIN:Bang("!UpdateMeasure",measureName,cfg)
  end

  if colors == "Wallpaper" then SKIN:Bang('[!CommandMeasure MeasureRun Run "#Config#"]') end

  SKIN:Bang(wKV,"NearestAxis","OnUpdateAction","",rotationPath)
  SKIN:Bang(wKV,"Matrix","OnUpdateAction","",rotationPath)
  
  -- Each skin .INI file has some specific settings to be copied to the Variables.inc file for easier retrieval
  -- For the next skin initialization
  SKIN:Bang(wKV,"Rainmeter","OnRefreshAction",'[!WriteKeyValue Variables Angle "#*Angle*#" "#*@*#Variables.inc"][!WriteKeyValue Variables Invert "#*Invert*#" "#*@*#Variables.inc"][!WriteKeyValue Variables Channel "#*Channel*#" "#*@*#Variables.inc"][!WriteKeyValue Variables Port "#*Port*#" "#*@*#Variables.inc"][!WriteKeyValue Variables ID "#*ID*#" "#*@*#Variables.inc"][!WriteKeyValue Variables Config "#*CURRENTCONFIG*#" "#*@*#Variables.inc"][!ActivateConfig "#*ROOTCONFIG*#\\Initialize"]',sharedPath)
  
  SKIN:Bang(wKV,incl,"@Include2","",sharedPath)
  SKIN:Bang(wKV,incl,"@Include3","",sharedPath)

  SKIN:Bang("!DeactivateConfig")
end